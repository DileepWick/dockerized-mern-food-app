services:
  restaurant-service:
    build:
      context: ./restaurant-service
      dockerfile: ../restaurant-service/Dockerfile
    restart: unless-stopped
    init: true
    env_file: ./restaurant-service/.env
    ports:
      - "3001:3001"  # Expose on 3001 to avoid port conflicts
    networks:
      - backend

  
  client:
    build:
      context: ./client
      dockerfile: ../client/Dockerfile
    restart: unless-stopped
    init: true
    ports:
      - "4173:4173"
    networks:
      - backend
    depends_on:
      - restaurant-service
      - auth-service


  auth-service:
    build:
      context: ./auth-service
      dockerfile: ../auth-service/Dockerfile
    restart: unless-stopped
    init: true
    env_file: ./auth-service/.env
    ports:
      - "3000:3000"
    networks:
      - backend

  js-order_services:
    build:
      context: ./order_services
      dockerfile: ../order_servicesDockerfile
    restart: unless-stopped
    init: true
    env_file: ./order_services/.env
    ports:
      - "3003:3000"  # Expose on 3003 to avoid port conflicts
    networks:
      - backend

  js-products_services:
    build:
      context: ./products_services
      dockerfile: ../products_servicesDockerfile
    restart: unless-stopped
    init: true
    env_file: ./products_services/.env
    ports:
      - "3004:3000"  # Expose on 3004 to avoid port conflicts
    networks:
      - backend



networks:
  backend:
    driver: bridge
